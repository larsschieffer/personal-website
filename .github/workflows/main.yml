name: ðŸš€ CI/CD
env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: â¬£ ESLint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup worker
        uses: ./.github/actions/setup

      - name: Lint
        run: pnpm run lint

  typecheck:
    name: Ê¦ TypeScript
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup worker
        uses: ./.github/actions/setup

      - name: Type check
        run: pnpm run typecheck

  build:
    if: github.event_name == 'pull_request'
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup worker
        uses: ./.github/actions/setup

      - name: Build
        run: pnpm run build

  deploy:
    if: github.event_name != 'pull_request'
    needs: [lint, typecheck]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup worker
        uses: ./.github/actions/setup

      - name: Install Vercel CLI
        run: pnpm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}

  is-db-migration-required:
    name: Check if database migration is required
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    outputs:
      is-required: ${{ steps.filter.outputs.database }}
    steps:
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            database:
              - './prisma/**'

  db-migration:
    name: Database migration
    runs-on: ubuntu-latest
    needs: [is-db-migration-required]
    if: github.event_name != 'pull_request' && needs.is-db-migration-required.outputs.is-required == 'true'
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup worker
        uses: ./.github/actions/setup

      - name: Run database migrations
        run: pnpm prisma migrate deploy
        env:
          POSTGRES_PRISMA_URL: ${{ secrets.POSTGRES_PRISMA_URL }}
